{"version":3,"file":"static/js/583.f0bb2ac5.chunk.js","mappings":"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","sources":["utilities/analysisUtilities.ts","components/StatsPage/statsWorker.ts","data/dice.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import { v4 as uuid } from 'uuid'\r\nimport Attack from './Attack'\r\nimport { getAllOptionalAbilities } from \"./optionalAbilityUtilities\"\r\nimport { ACC, BLACK, GREEN, WHITE, DICE_MAX, DICE_MIN, ATTACK, DEFENSE } from '../data'\r\n\r\n/**\r\n * Interface function that creates an Attack object\r\n **/ \r\nexport const getAttackObject = (attack: CustomData, defense: Partial<CustomData> = {}, requiredAccuracy = 0, postProgressMessage?: PostProgressMessage): Attack => {\r\n    return new Attack(\r\n        attack.dice.concat(defense.dice || []),\r\n        attack.surgeAbilities,\r\n        addPropertyLists(attack.bonus, defense.bonus),\r\n        requiredAccuracy,\r\n        [attack.rerollAbilities || [], defense.rerollAbilities || []],\r\n        attack.diceSides?.concat(defense.diceSides || []),\r\n        postProgressMessage\r\n    )\r\n}\r\n\r\n/**\r\n * Gets the results for the Stats page\r\n **/ \r\nexport function getStatsResults(\r\n    { customAttack, customDefense, requiredAccuracy }: FullCustomData,\r\n    postProgressMessage?: PostProgressMessage\r\n): StatsResults {\r\n    const attackData = getAttackObject(customAttack, customDefense, requiredAccuracy, postProgressMessage)\r\n    return {\r\n        average: attackData.average,\r\n        histogram: getDamageHistogram(attackData.rolls, attackData.probabilities)\r\n    }\r\n}\r\n\r\n/**\r\n * Get the results for the Compare page\r\n **/ \r\nexport function getCompareResult(\r\n    { name, cardsAttack, customAttack, requiredAccuracy }: NamedAttackData,\r\n    postProgressMessage?: PostProgressMessage\r\n): CompareResult {\r\n    const blackAttack = getAttackObject(customAttack, { dice: [BLACK] }, requiredAccuracy, postProgressMessage)\r\n    const whiteAttack = getAttackObject(customAttack, { dice: [WHITE] }, requiredAccuracy, postProgressMessage)\r\n    const [min, max] = getMinMaxAccuracy(customAttack)\r\n    return {\r\n        id: uuid(),\r\n        name,\r\n        ...customAttack,\r\n        requiredAccuracy,\r\n        cardsAttack,\r\n        whiteAvgDam: whiteAttack.average,\r\n        blackAvgDam: blackAttack.average,\r\n        minAcc: min,\r\n        maxAcc: max\r\n    }\r\n}\r\n\r\n/**\r\n * Get the results for the Compare page\r\n **/ \r\nexport function getRerollResults(\r\n    { customAttack, customDefense, requiredAccuracy }: FullCustomData,\r\n    postProgressMessage?: PostProgressMessage\r\n): RerollOption[] {\r\n    const attackData = getAttackObject(customAttack, customDefense, requiredAccuracy, postProgressMessage)\r\n    return attackData.rerollOptions\r\n}\r\n\r\n/**\r\n * Gets the damage histogram for the Stats page\r\n **/ \r\nexport const getDamageHistogram = (damageOfRolls: number[], probabilityOfRolls: number[]): HistogramBar[] => {\r\n    const probabilityTotal = probabilityOfRolls.reduce((total, p) => p + total, 0)\r\n    const histogram = []\r\n    // For each possible roll, add the data to the histogram\r\n    for (let rollIndex = 0; rollIndex < damageOfRolls.length; rollIndex++) {\r\n        let item: HistogramBar | undefined = histogram.find(i => i.value === damageOfRolls[rollIndex]);\r\n        // If there's not already an item in the histogram for that property value, make one\r\n        if (!item) {\r\n            item = { value: damageOfRolls[rollIndex], amount: 0, percentage: 0, atLeastPercentage: 0 }\r\n            histogram.push(item)\r\n        }\r\n        // Count this data point in the histogram\r\n        item.amount += probabilityOfRolls[rollIndex]\r\n    }\r\n    // Sort the histogram by property value\r\n    histogram.sort((a, b) => a.value - b.value)\r\n    // Calculate percentage of getting the value\r\n    histogram.forEach(item => item.percentage = 100 * item.amount / probabilityTotal)\r\n    // Calculate percentage of getting at least the value\r\n    for (let i = histogram.length - 1; i >= 0; i--) {\r\n        histogram[i].atLeastPercentage = (i === histogram.length - 1) ?\r\n            histogram[i].percentage :\r\n            histogram[i].percentage + histogram[i + 1].atLeastPercentage\r\n    }\r\n    return histogram;\r\n}\r\n\r\n/**\r\n * Gets custom data from cards data\r\n **/ \r\nexport function getCustomData(\r\n    { cards = [], focused = false, hidden = false, selectedOptionalIds = [] }: Partial<CardsData>, \r\n    isAttack: boolean = false\r\n): CustomData {\r\n    const optionals = getAllOptionalAbilities(cards, isAttack)\r\n        .filter(optional => selectedOptionalIds.includes(optional.id as string))\r\n\r\n    const diceProperty = (isAttack) ? \"attackDice\" : \"defenseDice\"\r\n    const bonusProperty = (isAttack) ? \"attackBonus\" : \"defenseBonus\"\r\n    const rerollAbilityPlayerType = (isAttack) ? ATTACK : DEFENSE\r\n\r\n    return {\r\n        dice: removeFromArray<Die>(\r\n            ([] as Array<Die | undefined>).concat(\r\n                cards.flatMap(c => c[diceProperty]),\r\n                optionals.flatMap(a => a.dice),\r\n                (focused ? GREEN : undefined),\r\n            ).filter(d => d) as Array<Die>,\r\n            isAttack ? optionals.flatMap(a => a.negativeAttackDice).filter(d => d) as Array<Die> : []\r\n        ),\r\n        surgeAbilities: !isAttack ? undefined : ([] as PropertyList[]).concat(\r\n            cards.flatMap(c => c.surgeAbilities || []),\r\n            optionals.flatMap(a => a.surgeAbilities || [])\r\n        ),\r\n        bonus: addPropertyLists(\r\n            ...cards.map(c => c[bonusProperty]),\r\n            ...optionals.map(a => a.bonus),\r\n            (hidden ? [0, 0, 1, 0, 0, 0, 0] : undefined)\r\n        ),\r\n        rerollAbilities: ([] as RerollAbility[]).concat(\r\n            cards.flatMap(c => (c.rerollAbilities && c.rerollAbilities[rerollAbilityPlayerType]) || []),\r\n            optionals.flatMap(o => o.rerollAbilities || [])\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the minimum possible accuracy and the maximum possible accuracy for an attack & defense combo\r\n **/ \r\nexport const getMinMaxAccuracy = (attack: CustomData, defense: Partial<CustomData> = {}): [min: number, max: number] => {\r\n    let min = attack.dice.reduce((total, die) => DICE_MIN[die] + total, 0)\r\n        + attack.bonus[ACC]\r\n        + ((defense.bonus && defense?.bonus[ACC]) || 0)\r\n    let max = attack.dice.reduce((total, die) => DICE_MAX[die] + total, 0)\r\n        + attack.bonus[ACC]\r\n        + ((defense.bonus && defense?.bonus[ACC]) || 0)\r\n        + (attack.surgeAbilities?.reduce((total, ability) => total + ability[ACC], 0) || 0)\r\n    return [min < 0 ? 0 : min, max < 0 ? 0 : max]\r\n}\r\n\r\n/**\r\n * Removes one of each instance of the items in the toRemove array from the array\r\n **/ \r\nfunction removeFromArray<ItemType>(array: ItemType[], toRemove: ItemType[]) {\r\n    let newArray = [...array]\r\n    toRemove.forEach(item => {\r\n        if (newArray.indexOf(item) !== -1) {\r\n            newArray.splice(newArray.indexOf(item), 1)\r\n        }\r\n    })\r\n    return newArray\r\n}\r\n\r\n/**\r\n * Adds property lists together, ignores any undefined lists\r\n **/ \r\nexport function addPropertyLists(a: PropertyList = [0, 0, 0, 0, 0, 0, 0], ...others: Array<PropertyList | undefined>): PropertyList {\r\n    return a.map((value, index) => value + others.reduce((total, b) => b ? total + b[index] : total, 0)) as PropertyList\r\n}","import { getStatsResults } from \"../../utilities\"\r\n\r\nonmessage = (message: MessageEvent<FullCustomData>) => {\r\n    \r\n    // Update about progress if it's changed by at least one-tenth of a percent\r\n    let lastProgress = 0\r\n    const postProgressMessage: PostProgressMessage = (progress) => {\r\n        const roundedToTenths = Math.round(progress * 10) / 10\r\n        if(roundedToTenths !== lastProgress) {\r\n            postMessage(roundedToTenths)\r\n            lastProgress = roundedToTenths\r\n        }\r\n    }\r\n    \r\n    // Get the stats results and pass in the postProgressMessage function\r\n    const results = getStatsResults(message.data, postProgressMessage)\r\n\r\n    // Post a message with the final results\r\n    postMessage(results)\r\n}","export const BLUE: Die = \"Blue\"\r\nexport const RED: Die = \"Red\"\r\nexport const GREEN: Die = \"Green\"\r\nexport const YELLOW: Die = \"Yellow\"\r\nexport const BLACK: Die = \"Black\"\r\nexport const WHITE: Die = \"White\"\r\n\r\nexport const ATTACK_DICE: Die[] = [RED, GREEN, BLUE, YELLOW]\r\nexport const DEFENSE_DICE: Die[] = [BLACK, WHITE]\r\n\r\n// CSS classes to apply the right color for each dice\r\nexport const DICE_CLASSES: Record<Die, string> = {\r\n    [GREEN]: \"success\", \r\n    [BLUE]: \"info\", \r\n    [YELLOW]: \"warning\", \r\n    [RED]: \"danger\", \r\n    [BLACK]: \"dark border border-light-gray\", \r\n    [WHITE]: \"white\"\r\n}\r\n\r\n// The minimum and maximum possible accuracy for each dice\r\nexport const DICE_MIN: Record<Die, number> = {\r\n    [GREEN]: 1, \r\n    [BLUE]: 2, \r\n    [YELLOW]: 0, \r\n    [RED]: 0, \r\n    [BLACK]: 0, \r\n    [WHITE]: 0\r\n}\r\nexport const DICE_MAX: Record<Die, number> = {\r\n    [GREEN]: 3, \r\n    [BLUE]: 5, \r\n    [YELLOW]: 2, \r\n    [RED]: 0, \r\n    [BLACK]: 0, \r\n    [WHITE]: 0\r\n}\r\n\r\n/**\r\n * The sides of all dice by color\r\n * In order of: Accuracy, Damages, Surges, Blocks, Evades, Dodges, Pierce\r\n */\r\nexport const DICE: Record<Die, SideList> = {\r\n    [RED]: [\r\n        [0, 1, 0, 0, 0, 0, 0],\r\n        [0, 2, 0, 0, 0, 0, 0],\r\n        [0, 2, 0, 0, 0, 0, 0],\r\n        [0, 2, 1, 0, 0, 0, 0],\r\n        [0, 3, 0, 0, 0, 0, 0],\r\n        [0, 3, 0, 0, 0, 0, 0]\r\n    ],\r\n    [GREEN]: [\r\n        [1, 0, 1, 0, 0, 0, 0],\r\n        [1, 1, 1, 0, 0, 0, 0],\r\n        [1, 2, 0, 0, 0, 0, 0],\r\n        [2, 1, 1, 0, 0, 0, 0],\r\n        [2, 2, 0, 0, 0, 0, 0],\r\n        [3, 2, 0, 0, 0, 0, 0]\r\n    ],\r\n    [BLUE]: [\r\n        [2, 0, 1, 0, 0, 0, 0],\r\n        [2, 1, 0, 0, 0, 0, 0],\r\n        [3, 1, 1, 0, 0, 0, 0],\r\n        [3, 2, 0, 0, 0, 0, 0],\r\n        [4, 2, 0, 0, 0, 0, 0],\r\n        [5, 1, 0, 0, 0, 0, 0]\r\n    ],\r\n    [YELLOW]: [\r\n        [0, 0, 1, 0, 0, 0, 0],\r\n        [0, 1, 2, 0, 0, 0, 0],\r\n        [1, 2, 0, 0, 0, 0, 0],\r\n        [1, 1, 1, 0, 0, 0, 0],\r\n        [2, 1, 0, 0, 0, 0, 0],\r\n        [2, 0, 1, 0, 0, 0, 0]\r\n    ],\r\n    [BLACK]: [\r\n        [0, 0, 0, 1, 0, 0, 0],\r\n        [0, 0, 0, 1, 0, 0, 0],\r\n        [0, 0, 0, 2, 0, 0, 0],\r\n        [0, 0, 0, 2, 0, 0, 0],\r\n        [0, 0, 0, 3, 0, 0, 0],\r\n        [0, 0, 0, 0, 1, 0, 0]\r\n    ],\r\n    [WHITE]: [\r\n        [0, 0, 0, 1, 1, 0, 0],\r\n        [0, 0, 0, 1, 1, 0, 0],\r\n        [0, 0, 0, 1, 0, 0, 0],\r\n        [0, 0, 0, 0, 1, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 1, 0]\r\n    ]\r\n}\r\n\r\ntype SideList = [PropertyList, PropertyList, PropertyList, PropertyList, PropertyList, PropertyList]","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [335], function() { return __webpack_require__(2583); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"658a16ab\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/imperial-assault-calculator/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t583: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkassault_calculator\"] = self[\"webpackChunkassault_calculator\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(335).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["getAttackObject","attack","defense","requiredAccuracy","postProgressMessage","Attack","dice","concat","surgeAbilities","addPropertyLists","bonus","rerollAbilities","diceSides","getDamageHistogram","damageOfRolls","probabilityOfRolls","probabilityTotal","reduce","total","p","histogram","rollIndex","item","find","i","value","amount","percentage","atLeastPercentage","push","length","sort","a","b","forEach","others","map","index","onmessage","message","lastProgress","results","customAttack","customDefense","attackData","average","rolls","probabilities","getStatsResults","data","progress","roundedToTenths","Math","round","postMessage","BLUE","RED","GREEN","YELLOW","BLACK","WHITE","ATTACK_DICE","DEFENSE_DICE","DICE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","deferred","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","f","e","chunkId","Promise","all","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next","then"],"sourceRoot":""}