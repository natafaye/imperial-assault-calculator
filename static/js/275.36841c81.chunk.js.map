{"version":3,"file":"static/js/275.36841c81.chunk.js","mappings":"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","sources":["utilities/analysisUtilities.js","components/RerollPage/rerollWorker.js","data/constants.js","data/dice.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import { v4 as uuid } from 'uuid'\r\nimport Attack from './Attack'\r\nimport { getAllOptionalAbilities } from \"./optionalAbilityUtilities\"\r\nimport { ACC, BLACK, GREEN, WHITE, DICE_MAX, DICE_MIN, ATTACK, DEFENSE } from '../data'\r\n\r\n/**\r\n * Interface function that gets an Attack object with the right data\r\n * @param {object} unitAttack Data about the unit attack\r\n * @param {object} attack Data about the attack\r\n * @param {object?} defense Optional data about the defense (for adding the defense bonus in)\r\n * @param {number?} requiredAccuracy A minimum required accuracy to hit, below which damage is 0\r\n * @param {function?} postWebWorkerMessage A function for posting a web worker message, if running in web worker\r\n * @returns {Attack} An Attack object\r\n */\r\nexport const getAttackObject = (attack, defense, requiredAccuracy = 0, postWebWorkerMessage) => {\r\n    return new Attack(\r\n        attack.dice.concat(defense?.dice || []),\r\n        attack.surgeAbilities,\r\n        addValues(attack.bonus, defense?.bonus),\r\n        requiredAccuracy,\r\n        [ attack.rerollAbilities || [], defense?.rerollAbilities || [] ],\r\n        attack.diceSides?.concat(defense?.diceSides || []),\r\n        postWebWorkerMessage\r\n    )\r\n}\r\n\r\n/**\r\n * Gets the average damage and histogram for an attack and defense\r\n * @param {{ \r\n *  customAttack: object, \r\n *  customDefense: object,\r\n *  requiredAccuracy: number\r\n * }} data The attack and defense data\r\n * @param {function?} postWebWorkerMessage A function for posting a web worker message, if running in web worker\r\n * @returns {{ \r\n *  average: number, \r\n *  histogram: {value: number, amount: number, percentage: number, atLeastPercentage: number }[],\r\n * }} All the stats data\r\n */\r\nexport const getStatsResults = ({ customAttack, customDefense, requiredAccuracy }, postWebWorkerMessage) => {\r\n    const attackData = getAttackObject(customAttack, customDefense, requiredAccuracy, postWebWorkerMessage)\r\n    return {\r\n        average: attackData.average,\r\n        histogram: getHistogram(attackData.rolls, attackData.probabilities)\r\n    }\r\n}\r\n\r\n/**\r\n * Takes data about an attack and computes averages vs 1 black die and vs 1 white die\r\n * and other data for comparison\r\n * \r\n * @param {{ \r\n *  name: string, dice: string[], bonus: number[], \r\n *  unitData: { unit: object?, classCards: object[], weapon: object?, mods: object[], focused: boolean } \r\n *  requiredAccuracy: number,\r\n * }} attackData Data about an attack\r\n * @param {function?} postWebWorkerMessage A function for posting a web worker message, if running in web worker\r\n * @returns {object} comparison data for the attack\r\n */\r\nexport const getCompareResults = ({ name, unitData, requiredAccuracy = 0, ...customData }, postWebWorkerMessage) => {\r\n    const blackAttack = getAttackObject(customData, { dice: [BLACK] }, requiredAccuracy, postWebWorkerMessage)\r\n    const whiteAttack = getAttackObject(customData, { dice: [WHITE] }, requiredAccuracy, postWebWorkerMessage)\r\n    const [min, max] = getMinMaxAccuracy(customData)\r\n    return { \r\n        id: uuid(), \r\n        name, \r\n        ...customData, \r\n        unitData, \r\n        whiteAvgDam: whiteAttack.average, \r\n        blackAvgDam: blackAttack.average, \r\n        whiteHistogram: getHistogram(whiteAttack.rolls, whiteAttack.probabilities), \r\n        blackHistogram: getHistogram(blackAttack.rolls, blackAttack.probabilities), \r\n        minAcc: min, \r\n        maxAcc: max \r\n    }\r\n}\r\n\r\n/**\r\n * Takes data about an attack and defense with reroll abilities and gets the avg damage for rerolling particular dice next\r\n * @param {{ customAttack, customDefense, requiredAccuracy }} data Attack and defense data with diceSide arrays on them\r\n * @param {function?} postWebWorkerMessage A function for posting a web worker message, if running in web worker\r\n * @returns {{ dice, avgDamage }[]} An array of data about the average damage of rerolling different sets of dice\r\n */\r\nexport const getRerollResults = ({ customAttack, customDefense, requiredAccuracy }, postWebWorkerMessage) => {\r\n    const attackData = getAttackObject(customAttack, customDefense, requiredAccuracy, postWebWorkerMessage)\r\n    return attackData.rerollOptions\r\n}\r\n\r\n/**\r\n * Creates histogram data for damage\r\n * @param {number[]} damageOfRolls an array of damage numbers for all possible rolls\r\n * @param {number[]} probabilityOfRolls an array of probabilities for all possible rolls\r\n * @returns {{ value: number, amount: number, percentage: number, atLeastPercentage: number }[]\r\n * } An array of histogram data\r\n */\r\nexport const getHistogram = (damageOfRolls, probabilityOfRolls) => {\r\n    const probabilityTotal = probabilityOfRolls.reduce((total, p) => p + total, 0)\r\n    const histogram = []\r\n    // For each possible roll, add the data to the histogram\r\n    for(let rollIndex = 0; rollIndex < damageOfRolls.length; rollIndex++) {\r\n        let item = histogram.find(item => item.value === damageOfRolls[rollIndex]);\r\n        // If there's not already an item in the histogram for that property value, make one\r\n        if (!item) {\r\n            item = { value: damageOfRolls[rollIndex], amount: 0 }\r\n            histogram.push(item)\r\n        }\r\n        // Count this data point in the histogram\r\n        item.amount += probabilityOfRolls[rollIndex]\r\n    }\r\n    // Sort the histogram by property value\r\n    histogram.sort((a, b) => a.value - b.value)\r\n    // Calculate percentage of getting the value\r\n    histogram.forEach(item => item.percentage = 100 * item.amount / probabilityTotal)\r\n    // Calculate percentage of getting at least the value\r\n    for (let i = histogram.length - 1; i >= 0; i--) {\r\n        histogram[i].atLeastPercentage = (i === histogram.length - 1) ?\r\n            histogram[i].percentage :\r\n            histogram[i].percentage + histogram[i + 1].atLeastPercentage\r\n    }\r\n    return histogram;\r\n}\r\n\r\n/**\r\n * Combines all the unit & class cards & weapon & mods data to make one set of attack data\r\n * @param {{ cards: object[]?, focused: boolean?, hidden: boolean?, selectedOptionalIds: string[]?}} unitData The data to combine\r\n * @returns {{ dice: string[], bonus: [], surgeAbilities: number[][], rerollAbilities: [number[], number[]] }} The combined attack data\r\n */\r\nexport const getAttackData = ({ cards = [], focused = false, hidden = false, selectedOptionalIds = [] }) => {\r\n    const optionals = getAllOptionalAbilities({ cards, isAttack: true })\r\n        .filter(a => selectedOptionalIds.includes(a.id));\r\n\r\n    return {\r\n        dice: removeFromArray(\r\n            [].concat(\r\n                cards.flatMap(c => c.attackDice),\r\n                optionals.flatMap(a => a.dice),\r\n                (focused ? GREEN : undefined),\r\n            ).filter(d => d),\r\n            optionals.flatMap(a => a.negativeAttackDice).filter(d => d)\r\n        ),\r\n        surgeAbilities: [].concat(\r\n            cards.flatMap(c => c.surgeAbilities || []),\r\n            optionals.flatMap(a => a.surgeAbilities || [])\r\n        ),\r\n        bonus: addValues(\r\n            ...cards.map(c => c.attackBonus),\r\n            ...optionals.map(a => a.bonus),\r\n            (hidden ? [0,0,1,0,0,0, 0] : undefined)\r\n        ),\r\n        rerollAbilities: [].concat(\r\n            cards.flatMap(c => (c.rerollAbilities && c.rerollAbilities[ATTACK]) || []),\r\n            optionals.flatMap(o => (o.rerollAbilities && o.rerollAbilities[ATTACK]) || [])\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * Combines all the unit & class cards to make one set of defense data\r\n * @param {{ cards: object[]?, hidden: boolean?, selectedOptionalIds: string[]? }} unitData The data to combine\r\n * @returns {{ dice: string[], bonus: [], rerollAbilities: [number[], number[]] }} The combined defense data\r\n */\r\nexport const getDefenseData = ({ cards = [], hidden = false, selectedOptionalIds = [] }) => {\r\n    const optionals = getAllOptionalAbilities({ cards })\r\n        .filter(a => selectedOptionalIds.includes(a.id));\r\n\r\n    return {\r\n        dice: [].concat(\r\n            cards.flatMap(c => c.defenseDice),\r\n            optionals.flatMap(a => a.dice)\r\n        ).filter(d => d),\r\n        bonus: addValues(\r\n            ...cards.map(c => c.defenseBonus),\r\n            (hidden ? [-2,0,0,0,0,0, 0] : undefined)\r\n        ),\r\n        rerollAbilities: [].concat(\r\n            cards.flatMap(c => (c.rerollAbilities && c.rerollAbilities[DEFENSE]) || []),\r\n            optionals.flatMap(o => (o.rerollAbilities && o.rerollAbilities[DEFENSE]) || [])\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the minimum and maximum possible accuracy for a given attack against a given defense\r\n * @param {{ dice: string[], surgeAbilities: number[][], bonus: [], rerolls: number }} attack The combined attack data\r\n * @param {{ dice: string[], bonus: [], rerolls: number }?} defense The combined defense data\r\n * @returns {[number, number]} An array with the min and max accuracy, in that order\r\n */\r\nexport const getMinMaxAccuracy = (attack, defense) => {\r\n    let min = attack.dice.reduce((total, die) => DICE_MIN[die] + total, 0)\r\n        + attack.bonus[ACC]\r\n        + (defense?.bonus[ACC] || 0)\r\n    let max = attack.dice.reduce((total, die) => DICE_MAX[die] + total, 0)\r\n        + attack.bonus[ACC]\r\n        + (defense?.bonus[ACC] || 0)\r\n        + attack.surgeAbilities.reduce((total, ability) => total + ability[ACC], 0)\r\n    return [min < 0 ? 0 : min, max < 0 ? 0 : max]\r\n}\r\n\r\n\r\n// Helper utilities\r\n\r\nfunction removeFromArray(array, toRemove) {\r\n    let newArray = [...array]\r\n    toRemove.forEach(item => {\r\n        if (newArray.indexOf(item) !== -1) {\r\n            newArray.splice(newArray.indexOf(item), 1)\r\n        }\r\n    })\r\n    return newArray\r\n}\r\n\r\nexport function addValues(a = [0, 0, 0, 0, 0, 0, 0], ...others) {\r\n    return a.map((value, index) => value + others.reduce((total, b) => b ? total + b[index] : total, 0))\r\n}","import { getRerollResults } from \"../../utilities\"\r\n\r\nonmessage = (message) => {\r\n    let lastProgress = 0\r\n    const postProgressMessage = (progress) => {\r\n        const roundedToTenths = Math.round(progress * 10) / 10\r\n        if(roundedToTenths !== lastProgress) {\r\n            postMessage(roundedToTenths)\r\n            lastProgress = roundedToTenths\r\n        }\r\n    }\r\n    // Get the stats results and pass in the postMessage function with the web worker context bound to it\r\n    const results = getRerollResults(message.data, postProgressMessage)\r\n    // Post a message with the final results\r\n    postMessage(results)\r\n}","// Property indexes\r\nexport const ACC = 0 // Accuracy\r\nexport const DAM = 1 // Damages\r\nexport const SUR = 2 // Surges\r\nexport const BLO = 3 // Blocks\r\nexport const EVA = 4 // Evades\r\nexport const DOD = 5 // Dodges\r\n\r\nexport const PIERCE = 6 // Pierce (for negative pierce value)\r\nexport const RER = 7 // Rerolls\r\n\r\n// Properties\r\nexport const PROPERTY_LABELS = [\"Accuracy\", \"Damage\", \"Surge\", \"Block\", \"Evade\", \"Dodge\", \"Pierce\", \"Reroll\"]\r\n\r\n// Ability checks\r\nexport const STRENGTH = 0\r\nexport const INSIGHT = 1\r\nexport const TECH = 2\r\n\r\n// Card types\r\nexport const UNIT = \"unit\"\r\nexport const CLASS_CARD = \"classcard\"\r\nexport const WEAPON = \"weapon\"\r\nexport const MOD = \"mod\"\r\n\r\n// Player types\r\nexport const ATTACK = 0\r\nexport const DEFENSE = 1\r\n\r\n// Player types\r\nexport const PLAYER_TYPE_LABELS = {\r\n    [ATTACK]: \"Attack\",\r\n    [DEFENSE]: \"Defense\"\r\n}\r\n\r\n// Validation\r\nexport const MAX_PROPERTY_VALUE = 15\r\nexport const MIN_PROPERTY_VALUE = -15\r\nexport const MIN_REROLL_AMOUNT = 1\r\nexport const MAX_REROLL_AMOUNT = 5\r\nexport const MIN_REROLL_TYPE = 0\r\nexport const MAX_REROLL_TYPE = 6\r\n","export const BLUE = \"Blue\"\r\nexport const RED = \"Red\"\r\nexport const GREEN = \"Green\"\r\nexport const YELLOW = \"Yellow\"\r\nexport const BLACK = \"Black\"\r\nexport const WHITE = \"White\"\r\nexport const WILD = \"Wild\"\r\n\r\nexport const ATTACK_DICE = [RED, GREEN, BLUE, YELLOW]\r\nexport const DEFENSE_DICE = [BLACK, WHITE]\r\n\r\n// CSS classes to apply the right color for each dice\r\nexport const DICE_CLASSES = {\r\n    [GREEN]: \"success\", \r\n    [BLUE]: \"info\", \r\n    [YELLOW]: \"warning\", \r\n    [RED]: \"danger\", \r\n    [BLACK]: \"dark border border-light-gray\", \r\n    [WHITE]: \"white\"\r\n}\r\n\r\n// The minimum and maximum possible accuracy for each dice\r\nexport const DICE_MIN = {\r\n    [GREEN]: 1, \r\n    [BLUE]: 2, \r\n    [YELLOW]: 0, \r\n    [RED]: 0, \r\n    [BLACK]: 0, \r\n    [WHITE]: 0\r\n}\r\nexport const DICE_MAX = {\r\n    [GREEN]: 3, \r\n    [BLUE]: 5, \r\n    [YELLOW]: 2, \r\n    [RED]: 0, \r\n    [BLACK]: 0, \r\n    [WHITE]: 0\r\n}\r\n\r\n/**\r\n * The sides of all dice by color\r\n * In order of: Accuracy, Damages, Surges, Blocks, Evades, Dodges\r\n */\r\nexport const DICE = {\r\n    [RED]: [\r\n        [0, 1, 0, 0, 0, 0, 0],\r\n        [0, 2, 0, 0, 0, 0, 0],\r\n        [0, 2, 0, 0, 0, 0, 0],\r\n        [0, 2, 1, 0, 0, 0, 0],\r\n        [0, 3, 0, 0, 0, 0, 0],\r\n        [0, 3, 0, 0, 0, 0, 0]\r\n    ],\r\n    [GREEN]: [\r\n        [1, 0, 1, 0, 0, 0, 0],\r\n        [1, 1, 1, 0, 0, 0, 0],\r\n        [1, 2, 0, 0, 0, 0, 0],\r\n        [2, 1, 1, 0, 0, 0, 0],\r\n        [2, 2, 0, 0, 0, 0, 0],\r\n        [3, 2, 0, 0, 0, 0, 0]\r\n    ],\r\n    [BLUE]: [\r\n        [2, 0, 1, 0, 0, 0, 0],\r\n        [2, 1, 0, 0, 0, 0, 0],\r\n        [3, 1, 1, 0, 0, 0, 0],\r\n        [3, 2, 0, 0, 0, 0, 0],\r\n        [4, 2, 0, 0, 0, 0, 0],\r\n        [5, 1, 0, 0, 0, 0, 0]\r\n    ],\r\n    [YELLOW]: [\r\n        [0, 0, 1, 0, 0, 0, 0],\r\n        [0, 1, 2, 0, 0, 0, 0],\r\n        [1, 2, 0, 0, 0, 0, 0],\r\n        [1, 1, 1, 0, 0, 0, 0],\r\n        [2, 1, 0, 0, 0, 0, 0],\r\n        [2, 0, 1, 0, 0, 0, 0]\r\n    ],\r\n    [BLACK]: [\r\n        [0, 0, 0, 1, 0, 0, 0],\r\n        [0, 0, 0, 1, 0, 0, 0],\r\n        [0, 0, 0, 2, 0, 0, 0],\r\n        [0, 0, 0, 2, 0, 0, 0],\r\n        [0, 0, 0, 3, 0, 0, 0],\r\n        [0, 0, 0, 0, 1, 0, 0]\r\n    ],\r\n    [WHITE]: [\r\n        [0, 0, 0, 1, 1, 0, 0],\r\n        [0, 0, 0, 1, 1, 0, 0],\r\n        [0, 0, 0, 1, 0, 0, 0],\r\n        [0, 0, 0, 0, 1, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 1, 0]\r\n    ]\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [24], function() { return __webpack_require__(5275); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"8460e0af\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/imperial-assault-calculator/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t275: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkassault_calculator\"] = self[\"webpackChunkassault_calculator\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(24).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["getAttackObject","attack","defense","requiredAccuracy","postWebWorkerMessage","Attack","dice","concat","surgeAbilities","addValues","bonus","rerollAbilities","diceSides","a","others","map","value","index","reduce","total","b","onmessage","message","lastProgress","results","customAttack","customDefense","rerollOptions","getRerollResults","data","progress","roundedToTenths","Math","round","postMessage","ACC","DAM","SUR","BLO","EVA","DOD","PIERCE","ATTACK","DEFENSE","BLUE","RED","GREEN","YELLOW","BLACK","WHITE","DICE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","deferred","result","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","Object","keys","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","f","e","chunkId","Promise","all","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","p","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","push","bind","moreModules","runtime","pop","next","then"],"sourceRoot":""}