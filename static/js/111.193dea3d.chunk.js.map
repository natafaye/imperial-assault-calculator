{"version":3,"file":"static/js/111.193dea3d.chunk.js","mappings":"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","sources":["utilities/analysisUtilities.js","../node_modules/uuid/dist/esm-browser/native.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js"],"sourcesContent":["import { v4 as uuid } from 'uuid'\r\nimport Attack from './Attack'\r\nimport { getAllOptionalAbilities } from \"./optionalAbilityUtilities\"\r\nimport { ACC, BLACK, GREEN, WHITE, DICE_MAX, DICE_MIN, ATTACK, DEFENSE } from '../data'\r\n\r\n/**\r\n * Interface function that gets an Attack object with the right data\r\n * @param {object} unitAttack Data about the unit attack\r\n * @param {object} attack Data about the attack\r\n * @param {object?} defense Optional data about the defense (for adding the defense bonus in)\r\n * @param {number?} requiredAccuracy A minimum required accuracy to hit, below which damage is 0\r\n * @param {function?} postWebWorkerMessage A function for posting a web worker message, if running in web worker\r\n * @returns {Attack} An Attack object\r\n */\r\nexport const getAttackObject = (attack, defense, requiredAccuracy = 0, postWebWorkerMessage) => {\r\n    return new Attack(\r\n        attack.dice.concat(defense?.dice || []),\r\n        attack.surgeAbilities,\r\n        addValues(attack.bonus, defense?.bonus),\r\n        requiredAccuracy,\r\n        [ attack.rerollAbilities || [], defense?.rerollAbilities || [] ],\r\n        attack.diceSides?.concat(defense?.diceSides || []),\r\n        postWebWorkerMessage\r\n    )\r\n}\r\n\r\n/**\r\n * Gets the average damage and histogram for an attack and defense\r\n * @param {{ \r\n *  customAttack: object, \r\n *  customDefense: object,\r\n *  requiredAccuracy: number\r\n * }} data The attack and defense data\r\n * @param {function?} postWebWorkerMessage A function for posting a web worker message, if running in web worker\r\n * @returns {{ \r\n *  average: number, \r\n *  histogram: {value: number, amount: number, percentage: number, atLeastPercentage: number }[],\r\n * }} All the stats data\r\n */\r\nexport const getStatsResults = ({ customAttack, customDefense, requiredAccuracy }, postWebWorkerMessage) => {\r\n    const attackData = getAttackObject(customAttack, customDefense, requiredAccuracy, postWebWorkerMessage)\r\n    return {\r\n        average: attackData.average,\r\n        histogram: getHistogram(attackData.rolls, attackData.probabilities)\r\n    }\r\n}\r\n\r\n/**\r\n * Takes data about an attack and computes averages vs 1 black die and vs 1 white die\r\n * and other data for comparison\r\n * \r\n * @param {{ \r\n *  name: string, dice: string[], bonus: number[], \r\n *  unitData: { unit: object?, classCards: object[], weapon: object?, mods: object[], focused: boolean } \r\n *  requiredAccuracy: number,\r\n * }} attackData Data about an attack\r\n * @param {function?} postWebWorkerMessage A function for posting a web worker message, if running in web worker\r\n * @returns {object} comparison data for the attack\r\n */\r\nexport const getCompareResults = ({ name, unitData, requiredAccuracy = 0, ...customData }, postWebWorkerMessage) => {\r\n    const blackAttack = getAttackObject(customData, { dice: [BLACK] }, requiredAccuracy, postWebWorkerMessage)\r\n    const whiteAttack = getAttackObject(customData, { dice: [WHITE] }, requiredAccuracy, postWebWorkerMessage)\r\n    const [min, max] = getMinMaxAccuracy(customData)\r\n    return { \r\n        id: uuid(), \r\n        name, \r\n        ...customData, \r\n        unitData, \r\n        whiteAvgDam: whiteAttack.average, \r\n        blackAvgDam: blackAttack.average, \r\n        whiteHistogram: getHistogram(whiteAttack.rolls, whiteAttack.probabilities), \r\n        blackHistogram: getHistogram(blackAttack.rolls, blackAttack.probabilities), \r\n        minAcc: min, \r\n        maxAcc: max \r\n    }\r\n}\r\n\r\n/**\r\n * Takes data about an attack and defense with reroll abilities and gets the avg damage for rerolling particular dice next\r\n * @param {{ customAttack, customDefense, requiredAccuracy }} data Attack and defense data with diceSide arrays on them\r\n * @param {function?} postWebWorkerMessage A function for posting a web worker message, if running in web worker\r\n * @returns {{ dice, avgDamage }[]} An array of data about the average damage of rerolling different sets of dice\r\n */\r\nexport const getRerollResults = ({ customAttack, customDefense, requiredAccuracy }, postWebWorkerMessage) => {\r\n    const attackData = getAttackObject(customAttack, customDefense, requiredAccuracy, postWebWorkerMessage)\r\n    return attackData.rerollOptions\r\n}\r\n\r\n/**\r\n * Creates histogram data for damage\r\n * @param {number[]} damageOfRolls an array of damage numbers for all possible rolls\r\n * @param {number[]} probabilityOfRolls an array of probabilities for all possible rolls\r\n * @returns {{ value: number, amount: number, percentage: number, atLeastPercentage: number }[]\r\n * } An array of histogram data\r\n */\r\nexport const getHistogram = (damageOfRolls, probabilityOfRolls) => {\r\n    const probabilityTotal = probabilityOfRolls.reduce((total, p) => p + total, 0)\r\n    const histogram = []\r\n    // For each possible roll, add the data to the histogram\r\n    for(let rollIndex = 0; rollIndex < damageOfRolls.length; rollIndex++) {\r\n        let item = histogram.find(item => item.value === damageOfRolls[rollIndex]);\r\n        // If there's not already an item in the histogram for that property value, make one\r\n        if (!item) {\r\n            item = { value: damageOfRolls[rollIndex], amount: 0 }\r\n            histogram.push(item)\r\n        }\r\n        // Count this data point in the histogram\r\n        item.amount += probabilityOfRolls[rollIndex]\r\n    }\r\n    // Sort the histogram by property value\r\n    histogram.sort((a, b) => a.value - b.value)\r\n    // Calculate percentage of getting the value\r\n    histogram.forEach(item => item.percentage = 100 * item.amount / probabilityTotal)\r\n    // Calculate percentage of getting at least the value\r\n    for (let i = histogram.length - 1; i >= 0; i--) {\r\n        histogram[i].atLeastPercentage = (i === histogram.length - 1) ?\r\n            histogram[i].percentage :\r\n            histogram[i].percentage + histogram[i + 1].atLeastPercentage\r\n    }\r\n    return histogram;\r\n}\r\n\r\n/**\r\n * Combines all the unit & class cards & weapon & mods data to make one set of attack data\r\n * @param {{ cards: object[]?, focused: boolean?, hidden: boolean?, selectedOptionalIds: string[]?}} unitData The data to combine\r\n * @returns {{ dice: string[], bonus: [], surgeAbilities: number[][], rerollAbilities: [number[], number[]] }} The combined attack data\r\n */\r\nexport const getAttackData = ({ cards = [], focused = false, hidden = false, selectedOptionalIds = [] }) => {\r\n    const optionals = getAllOptionalAbilities({ cards, isAttack: true })\r\n        .filter(a => selectedOptionalIds.includes(a.id));\r\n\r\n    return {\r\n        dice: removeFromArray(\r\n            [].concat(\r\n                cards.flatMap(c => c.attackDice),\r\n                optionals.flatMap(a => a.dice),\r\n                (focused ? GREEN : undefined),\r\n            ).filter(d => d),\r\n            optionals.flatMap(a => a.negativeAttackDice).filter(d => d)\r\n        ),\r\n        surgeAbilities: [].concat(\r\n            cards.flatMap(c => c.surgeAbilities || []),\r\n            optionals.flatMap(a => a.surgeAbilities || [])\r\n        ),\r\n        bonus: addValues(\r\n            ...cards.map(c => c.attackBonus),\r\n            ...optionals.map(a => a.bonus),\r\n            (hidden ? [0,0,1,0,0,0, 0] : undefined)\r\n        ),\r\n        rerollAbilities: [].concat(\r\n            cards.flatMap(c => (c.rerollAbilities && c.rerollAbilities[ATTACK]) || []),\r\n            optionals.flatMap(o => (o.rerollAbilities && o.rerollAbilities[ATTACK]) || [])\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * Combines all the unit & class cards to make one set of defense data\r\n * @param {{ cards: object[]?, hidden: boolean?, selectedOptionalIds: string[]? }} unitData The data to combine\r\n * @returns {{ dice: string[], bonus: [], rerollAbilities: [number[], number[]] }} The combined defense data\r\n */\r\nexport const getDefenseData = ({ cards = [], hidden = false, selectedOptionalIds = [] }) => {\r\n    const optionals = getAllOptionalAbilities({ cards })\r\n        .filter(a => selectedOptionalIds.includes(a.id));\r\n\r\n    return {\r\n        dice: [].concat(\r\n            cards.flatMap(c => c.defenseDice),\r\n            optionals.flatMap(a => a.dice)\r\n        ).filter(d => d),\r\n        bonus: addValues(\r\n            ...cards.map(c => c.defenseBonus),\r\n            (hidden ? [-2,0,0,0,0,0, 0] : undefined)\r\n        ),\r\n        rerollAbilities: [].concat(\r\n            cards.flatMap(c => (c.rerollAbilities && c.rerollAbilities[DEFENSE]) || []),\r\n            optionals.flatMap(o => (o.rerollAbilities && o.rerollAbilities[DEFENSE]) || [])\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the minimum and maximum possible accuracy for a given attack against a given defense\r\n * @param {{ dice: string[], surgeAbilities: number[][], bonus: [], rerolls: number }} attack The combined attack data\r\n * @param {{ dice: string[], bonus: [], rerolls: number }?} defense The combined defense data\r\n * @returns {[number, number]} An array with the min and max accuracy, in that order\r\n */\r\nexport const getMinMaxAccuracy = (attack, defense) => {\r\n    let min = attack.dice.reduce((total, die) => DICE_MIN[die] + total, 0)\r\n        + attack.bonus[ACC]\r\n        + (defense?.bonus[ACC] || 0)\r\n    let max = attack.dice.reduce((total, die) => DICE_MAX[die] + total, 0)\r\n        + attack.bonus[ACC]\r\n        + (defense?.bonus[ACC] || 0)\r\n        + attack.surgeAbilities.reduce((total, ability) => total + ability[ACC], 0)\r\n    return [min < 0 ? 0 : min, max < 0 ? 0 : max]\r\n}\r\n\r\n\r\n// Helper utilities\r\n\r\nfunction removeFromArray(array, toRemove) {\r\n    let newArray = [...array]\r\n    toRemove.forEach(item => {\r\n        if (newArray.indexOf(item) !== -1) {\r\n            newArray.splice(newArray.indexOf(item), 1)\r\n        }\r\n    })\r\n    return newArray\r\n}\r\n\r\nexport function addValues(a = [0, 0, 0, 0, 0, 0, 0], ...others) {\r\n    return a.map((value, index) => value + others.reduce((total, b) => b ? total + b[index] : total, 0))\r\n}","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}"],"names":["getAttackObject","attack","defense","requiredAccuracy","postWebWorkerMessage","Attack","dice","concat","surgeAbilities","addValues","bonus","rerollAbilities","diceSides","getCompareResults","name","unitData","customData","blackAttack","BLACK","whiteAttack","WHITE","getMinMaxAccuracy","min","max","id","uuid","whiteAvgDam","average","blackAvgDam","whiteHistogram","getHistogram","rolls","probabilities","blackHistogram","minAcc","maxAcc","damageOfRolls","probabilityOfRolls","probabilityTotal","reduce","total","p","histogram","rollIndex","item","find","value","amount","push","length","sort","a","b","forEach","percentage","i","atLeastPercentage","die","DICE_MIN","ACC","DICE_MAX","ability","others","map","index","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","toString","slice","unsafeStringify","arr","offset","toLowerCase","options","buf","native","rnds","random","_arrayWithHoles","Array","isArray","_iterableToArrayLimit","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","call","next","Object","done","err","_nonIterableRest","TypeError","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","apply","_objectSpread2","target","arguments","source","key","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectWithoutProperties","excluded","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","_objectWithoutPropertiesLoose","sourceKeys","_slicedToArray"],"sourceRoot":""}